[project]
name = "mpt-finops-operations"
version = "0.1.0"
description = "SWO FinOps For Cloud Operations API"
readme = { file = "README.md", content-type = "text/markdown" }
authors = [
    { name = "SoftwareOne AG" },
]
license = { file = "LICENSE.txt" }
requires-python = ">=3.12,<4"
dependencies = [
    "alembic==1.14.*",
    "asyncpg==0.30.*",
    "fastapi-pagination==0.12.*",
    "fastapi[standard]==0.115.*",
    "pydantic-extra-types==2.10.*",
    "pydantic-settings==2.6.*",
    "python-dotenv==1.0.*",
    "sqlalchemy[asyncio]==2.0.*",
    "httpx==0.27.*",
    "pyjwt==2.10.*",
    "sqlalchemy-utils==0.41.*",
    "cryptography==44.0.*",
    "gunicorn==23.0.*",
    "uvloop==0.21.*",
    "uvicorn-worker==0.3.*",
    "svcs==24.1.*",
    "pyyaml==6.0.*",
    "typer==0.13.*",
    "email-validator==2.2.*",
    "pycountry>=24.6.1,<24.7",
    "requela==0.1.*",
    # stamina uses calendar versioning meaning only the latest one is officially supported
    # ref: https://github.com/hynek/stamina/blob/main/.github/SECURITY.md
    "stamina==25.1.*",
    "azure-identity==1.21.*",
    "azure-storage-blob==12.25.*",
    "aiofiles==24.1.*",
    "python-dateutil==2.9.*",
    "aiohttp==3.11.*",
]

[dependency-groups]
dev = [
    "bandit>=1.8.0,<2.0",
    "faker>=33.1.0,<34.0",
    "ipython>=8.30.0,<9.0",
    "mypy>=1.14.0,<2.0",
    "pre-commit>=4.0.1,<5.0",
    "pytest-httpx>=0.34.0,<1.0",
    "pytest>=8.3.3,<9.0",
    "pytest-asyncio>=0.24.0,<1.0",
    "pytest-cov>=6.0.0,<7.0",
    "ruff>=0.8.0,<1.0",
    "pytest-mock>=3.14.0,<4.0",
    "ipdb>=0.13.13,<1.0",
    "asgi-lifespan>=2.1.0,<3.0",
    "types-pyyaml>=6.0.12.20241230,<7.0",
    "pytest-randomly>=3.16.0,<4.0",
    "pytest-dotenv>=0.5.2,<1.0",
    "time-machine>=2.16.0,<3.0",
    "pdbr[ipython]>=0.9.0",
    "pytest-capsqlalchemy>=0.2.0",
]

[project.scripts]
ffcops = "app.cli:app"

[tool.uv]
package = true

[tool.setuptools]
py-modules = ["app"]

[tool.ruff]
line-length = 100
target-version = "py312"
output-format = "full"
extend-exclude = [
    "migrations/versions/",
]
cache-dir = ".cache/ruff"

[tool.ruff.lint]
preview = true # enable linting rules in preview (e.g. RUF029 as of 2025-02-20)
explicit-preview-rules = true # only enable preview rules we explicitly specify
select = [
    "E", # w errors
    "W", # pycodestyle warnings
    "F", # pyflakes
    "I", # isort
    "B", # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade,
    "PT", # flake8-pytest-style
    "T10", # flake8-pytest-style
    "RUF029", # unused-async
]
ignore = [
    "PT001", # Use `@pytest.fixture()` over `@pytest.fixture`
    "PT011", # pytest.raises({exception}) is too broad, set the match parameter or use a more specific exception
    "PT023", # @pytest.mark.parametrize` is missing required arguments
    "B008", # do not perform function calls in argument defaults
    "B904", # Within an `except` clause, raise exceptions with `raise ... from err` or `raise ... from None` to distinguish them from errors in exception handling
]

[tool.ruff.format]
quote-style = "double"
docstring-code-format = true

[tool.bandit]
exclude_dirs = ["tests", ".venv"]

[tool.pytest.ini_options]
testpaths = "tests/"
pythonpath = "."
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "session"
addopts = "--cov=app --cov-report=term-missing --cov-report=html --cov-report=xml"
cache_dir = ".cache/pytest"
env_override_existing_values = 1
env_files = [".env", ".env.test"]

[tool.coverage.run]
branch = true
source = ["app"]
relative_files = true
# SQLAlchemy uses greenlets to pass context, so we need to specify this here,
# so that the coverage is calculated correctly. 'thread' is the default value,
# so including it in case some code relies on it
#
# refs:
#     * https://coverage.readthedocs.io/en/7.6.9/config.html#run-concurrency
#     * https://github.com/nedbat/coveragepy/issues/1082
concurrency = ["thread", "greenlet"]

[tool.coverage.report]
show_missing = true
exclude_lines = [
    "pragma: no cover",
    "pragma: no branch",
    "NotImplementedError",
]

[tool.mypy]
warn_no_return = false
ignore_missing_imports = true
cache_dir = ".cache/mypy"
plugins = ["pydantic.mypy"]
