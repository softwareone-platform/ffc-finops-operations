name: Release

on:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  build:

    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 'Get the version'
      id: get_version
      run: echo  "VERSION=${GITHUB_REF/refs\/tags\//}" >> "$GITHUB_OUTPUT"

    - name: 'Login to ACR'
      uses: docker/login-action@v3
      with:
        registry: ${{ vars.REGISTRY_LOGIN_SERVER }}
        username: ${{ vars.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}
    - name: Docker meta
      id: meta
      uses: docker/metadata-action@v4
      with:
        images: ${{ vars.REGISTRY_LOGIN_SERVER }}/ffc-operations
        tags: |
          type=semver,pattern={{major}}.{{minor}}.{{patch}},value=${{ steps.get_version.outputs.VERSION }}
          type=semver,pattern={{major}}.{{minor}},value=${{ steps.get_version.outputs.VERSION }}
          type=semver,pattern={{major}},value=${{ steps.get_version.outputs.VERSION }}
        flavor: |
          latest=false
    - name: Build and push docker image
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        file: prod.Dockerfile
        push: true
        tags: ${{ steps.meta.outputs.tags }}
    - name: Docker image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

  dtrack:
    runs-on: ubuntu-latest
    timeout-minutes: 10

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: 'Get the major version'
        id: get_version
        run: echo "MAJOR=${GITHUB_REF/refs\/tags\//}" |cut -d"." -f1 >> "$GITHUB_OUTPUT"
      - name: Install uv and set up its cache
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true
          cache-dependency-glob: "uv.lock"
      - name: Install Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ".python-version"
      - name: Install the project dependancies
        run: uv sync
      - name: Install cyclonedx-bom
        run: uv tool install cyclonedx-bom
      - name: Generate SBOM
        run: uv tool run --from cyclonedx-bom cyclonedx-py environment .venv > sbom.json
      - name: Upload SBOM
        uses: DependencyTrack/gh-upload-sbom@v3
        with:
          serverHostname: 'dependency-track.s1.team'
          protocol: 'https'
          apiKey: ${{ secrets.DEPENDENCYTRACK_APIKEY }}
          projectName: 'ffc-finops-operations'
          projectVersion: ${{ steps.get_version.outputs.MAJOR }}
          bomFilename: "sbom.json"
          autoCreate: true
